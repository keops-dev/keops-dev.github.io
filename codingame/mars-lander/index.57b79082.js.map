{"mappings":"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","sources":["src/config.ts","src/SimulatorUI.ts","src/Game.ts","src/MarsLander.ts","src/readline.ts","src/index.ts","src/GameSimulator.ts"],"sourcesContent":["export const AREA_WIDTH = 6999\nexport const AREA_HEIGHT = 2999\nexport const LAP_TURN = 100\nexport const MARS_GRAVITY = -3.711\nexport const POPULATION_SIZE = 100\nexport const CHROMOSOME_SIZE = 100\nexport const SELECTED_PERCENT = 0.1\n","import { AREA_HEIGHT, AREA_WIDTH } from \"./config\"\nimport Game from \"./Game\"\nimport MarsLander from \"./MarsLander\"\nimport { GameResult, GameState, Position } from \"./types\"\n\nconst gameDataTimer = document.getElementById(\"timer_value\")\nconst gameDataBestScore = document.getElementById(\"best_score_value\")\nconst gameDataBestState = document.getElementById(\"best_state_value\")\n\nexport default class SimulatorUI {\n  height: number = AREA_HEIGHT\n  width: number = AREA_WIDTH\n  // elems\n  marsBg: HTMLCanvasElement\n  animation: HTMLCanvasElement\n  // contexts\n  marsBgContext: CanvasRenderingContext2D\n  animationContext: CanvasRenderingContext2D\n  // data\n  scaleFactor: number\n\n  constructor() {\n    this.marsBg = document.getElementById(\"mars_bg\") as HTMLCanvasElement\n    this.animation = document.getElementById(\"animation\") as HTMLCanvasElement\n    this.marsBgContext = this.marsBg.getContext(\n      \"2d\"\n    ) as CanvasRenderingContext2D\n    this.animationContext = this.animation.getContext(\n      \"2d\"\n    ) as CanvasRenderingContext2D\n    this.scaleFactor = this.marsBg.clientWidth / this.width\n\n    this.drawLander = this.drawLander.bind(this)\n  }\n  clear() {\n    // this.marsBgContext.clearRect(0, 0, AREA_WIDTH, AREA_HEIGHT)\n    this.animationContext.clearRect(0, 0, AREA_WIDTH, AREA_HEIGHT)\n  }\n\n  draw(game: Game) {\n    window.requestAnimationFrame(() => this.drawLander(game))\n  }\n\n  drawGround(surfaces: Position[]) {\n    this.marsBgContext.save()\n    this.marsBgContext.translate(0, AREA_HEIGHT)\n    this.marsBgContext.scale(1, -1)\n    this.marsBgContext.beginPath()\n    this.marsBgContext.moveTo(0, 0)\n    this.marsBgContext.lineTo(0, surfaces[0].y)\n    for (const surface of surfaces) {\n      this.marsBgContext.lineTo(surface.x, surface.y)\n    }\n    this.marsBgContext.lineTo(AREA_WIDTH, 0)\n    this.marsBgContext.fillStyle = \"rgb(146, 53, 53)\"\n    this.marsBgContext.fill()\n    this.marsBgContext.restore()\n  }\n\n  drawLander(game: Game) {\n    if (game == null) {\n      console.error(\"Aucun jeu à dessiner\")\n      return\n    }\n\n    const lander = game.lander\n    const result = game.result\n\n    this.animationContext?.save()\n    this.animationContext?.translate(0, AREA_HEIGHT)\n    this.animationContext?.scale(1, -1)\n\n    this.animationContext.beginPath()\n    this.animationContext.moveTo(lander.positions[0].x, lander.positions[0].y)\n    for (let i = 0; i < lander.positions.length; i++) {\n      const pos = lander.positions[i]\n\n      // si c'est le dernier point on le fait plus gros avec un couleur\n      if (i === lander.positions.length - 1) {\n        this.animationContext!.fillStyle = \"rgb(255, 255, 255)\"\n        if (result === \"win\") {\n          this.animationContext!.fillStyle = \"rgb(0, 255, 0)\"\n        }\n        if (result === \"crash\") {\n          this.animationContext!.fillStyle = \"rgb(255,0,0)\"\n        }\n        if (result === \"onlanding\") {\n          this.animationContext!.fillStyle = \"rgb(0,191,255)\"\n        }\n        this.animationContext?.fillRect(\n          Math.round(pos.x) - 20,\n          Math.round(pos.y) - 20,\n          40,\n          40\n        )\n      }\n\n      this.animationContext!.fillStyle = \"rgb(255, 0, 0)\"\n      if (result === \"win\") {\n        this.animationContext!.fillStyle = \"rgb(255, 255, 255)\"\n      }\n      this.animationContext.lineTo(Math.round(pos.x), Math.round(pos.y))\n      // this.animationContext?.fillRect(\n      //   Math.round(pos.x) - 5,\n      //   Math.round(pos.y) - 5,\n      //   10,\n      //   10\n      // )\n    }\n    this.animationContext.lineWidth = 5\n    this.animationContext.stroke()\n\n    // const angleRadian = (Math.PI / 180) * rotation\n    // this.animationContext.save()\n    // this.animationContext.rotate(angleRadian)\n    // this.animationContext.drawImage(lander, marsLander.x - HALF_LANDER_HEIGHT, marsLander.y)\n    // this.animationContext.restore()\n\n    // const marsLander = document.getElementById(\"mars_lander\")\n    // const x = Math.ceil(pos.x * this.scaleFactor)\n    // const y = Math.ceil(pos.y * this.scaleFactor)\n\n    // marsLander!.style.transform = `translate(${x}px, ${-y}px) rotate(${-rotation}deg)`\n    this.animationContext?.restore()\n  }\n\n  updateInfoFrame(timer: number, bestScore: number, bestState: GameResult) {\n    gameDataTimer!.textContent = timer.toString()\n    gameDataBestScore!.textContent = bestScore.toString()\n    gameDataBestState!.textContent = bestState\n  }\n}\n","import { AREA_HEIGHT, AREA_WIDTH } from \"./config\"\nimport MarsLander from \"./MarsLander\"\nimport SimulatorUI from \"./SimulatorUI\"\nimport {\n  Chromosome,\n  Collision,\n  GameResult,\n  Gene,\n  Position,\n  Vector,\n} from \"./types\"\n\nexport default class Game {\n  simulationUI = new SimulatorUI()\n\n  playing = false\n  result: GameResult\n  score: number = 0\n  distanceToLandingArea = 0\n  timer = 0\n\n  commands: Chromosome\n  surfaces: Position[]\n  lander: MarsLander\n  ground: Position[]\n  landingArea: Vector\n\n  constructor(lander: MarsLander, commands: Chromosome, surfaces: Position[]) {\n    this.surfaces = surfaces\n    this.commands = commands\n    this.ground = [{ x: 0, y: 0 }, ...surfaces, { x: AREA_WIDTH, y: 0 }]\n    this.lander = lander\n    this.landingArea = this.findLandingArea()\n  }\n\n  distanceTo(P1: Position, P2: Position) {\n    return Math.sqrt(\n      (P2.x - P1.x) * (P2.x - P1.x) + (P2.y - P1.y) * (P2.y - P1.y)\n    )\n  }\n\n  /**\n   * - Plus on est proche d'atterrissage, mieux c'est\n   * - Si on se trouve au niveau de la zone d'atterrissage mais qu'on se crash,\n   *  c'est du à une vitesse élevée ou à un mauvais angle du lander\n   * - Moins on a consommer d'essenve, mieux c'est\n   */\n  calculateScore(crashed: boolean) {\n    // la distance max possible est la longueur des diagonales de l'air de jeu\n    const maxDist = Math.sqrt(\n      AREA_WIDTH * AREA_WIDTH + AREA_HEIGHT * AREA_HEIGHT\n    )\n\n    const landingAreaCenter = {\n      x: this.landingArea[0].x / 2 + this.landingArea[1].x / 2,\n      y: this.landingArea[0].y,\n    }\n    this.distanceToLandingArea = this.distanceTo(\n      this.lander.pos,\n      landingAreaCenter\n    )\n\n    if (crashed) {\n      this.score = 100 - (100 * this.distanceToLandingArea) / maxDist\n    } else if (this.lander.vSpeed < -40 || Math.abs(this.lander.hSpeed) > 20) {\n      let hSpeedMalus = 0\n      let vSpeedMalus = 0\n      let rotateMalus = 0\n\n      if (20 < Math.abs(this.lander.hSpeed)) {\n        hSpeedMalus = Math.abs(this.lander.hSpeed)\n        const extraSpeed = Math.max(Math.abs(this.lander.hSpeed), 0)\n        const deltaRatio = 1.0 - extraSpeed / 100\n        hSpeedMalus = 100 - 100 * deltaRatio\n      }\n      if (this.lander.vSpeed < -40) {\n        const extraSpeed = Math.max(Math.abs(this.lander.vSpeed), 0)\n        const deltaRatio = 1 - extraSpeed / 140\n        vSpeedMalus = 100 - 100 * deltaRatio\n      }\n      if (this.lander.rotate != 0) {\n        const extraRotation = Math.max(Math.abs(this.lander.rotate), 0)\n        const deltaRatio = 1 - extraRotation / 90\n        rotateMalus = 100 - 100 * deltaRatio\n      }\n      const malus = vSpeedMalus * 0.5 + hSpeedMalus * 0.5\n      // console.log(\"malus\", malus, vSpeedMalus, hSpeedMalus, rotateMalus)\n\n      this.score = 200 - malus\n    } else {\n      this.score = 200\n    }\n  }\n\n  stopGame(result: GameResult = \"crash\") {\n    this.playing = false\n    this.result = result\n    this.calculateScore(result === \"crash\")\n  }\n  playGame() {\n    this.playing = true\n    while (this.playing === true) {\n      this.doTurn()\n    }\n  }\n\n  intersectSegment(A: Position, B: Position, I: Position, P: Position) {\n    const D: Position = { x: 0, y: 0 }\n    const E: Position = { x: 0, y: 0 }\n    D.x = B.x - A.x\n    D.y = B.y - A.y\n    E.x = P.x - I.x\n    E.y = P.y - I.y\n    const denom = D.x * E.y - D.y * E.x\n    if (denom === 0) {\n      return\n    }\n    const t = -(A.x * E.y - I.x * E.y - E.x * A.y + E.x * I.y) / denom\n    if (t < 0 || t >= 1) {\n      return\n    }\n    const u = -(-D.x * A.y + D.x * I.y + D.y * A.x - D.y * I.x) / denom\n    if (u < 0 || u >= 1) {\n      return\n    }\n\n    const x = I.x + u * E.x\n    const y = A.y + t * D.y\n\n    return { position: { x, y }, surface: [A, B] }\n  }\n\n  collision(\n    tab: Position[],\n    prevPos: Position,\n    currentPos: Position\n  ): Collision {\n    const pointsNum: number = tab.length\n    const intersections: any = []\n    for (let i = 0; i < pointsNum; i++) {\n      const A = tab[i]\n      let B\n      if (i == pointsNum - 1) B = tab[0]\n      else B = tab[i + 1]\n      const iseg = this.intersectSegment(A, B, prevPos, currentPos)\n      if (iseg) intersections.push(iseg)\n    }\n    if (intersections.length % 2 == 1) {\n      return { state: true, ...intersections[0] }\n    } else return { state: false, position: { x: 0, y: 0 } }\n  }\n\n  findLandingArea(): Vector {\n    for (let i = 0; i < this.surfaces.length; i++) {\n      const point = this.surfaces[i]\n      const nextPoint = this.surfaces[i + 1]\n      if (point.y === nextPoint.y) {\n        return [point, nextPoint]\n      }\n    }\n    return [\n      { x: 0, y: 0 },\n      { x: 0, y: 0 },\n    ]\n  }\n\n  private doTurn() {\n    const command = this.commands[this.timer]\n\n    // add a second\n    this.timer += 1\n    const prevPos = Object.assign({}, this.lander.pos)\n    this.updateLander(command)\n\n    // si le lander est en dehors des limites on s'arrête là\n    if (this.outOfBounds(this.lander.pos)) {\n      this.stopGame()\n      console.log(\"Bah... il est passé où le lander ?\")\n    }\n\n    const collision = this.collision(this.ground, prevPos, this.lander.pos)\n    if (collision.state == true) {\n      this.lander.pos = collision.position\n      this.lander.positions[this.lander.positions.length - 1] =\n        collision.position\n\n      if (\n        JSON.stringify(this.landingArea) == JSON.stringify(collision.surface)\n      ) {\n        if (this.lander.landedWell()) {\n          this.stopGame(\"win\")\n        } else {\n          this.stopGame(\"onlanding\")\n        }\n      } else {\n        this.stopGame(\"crash\")\n      }\n    }\n  }\n\n  outOfBounds(target: Position): boolean {\n    if (target.x < 0 || target.x > AREA_WIDTH) return true\n    if (target.y < 0 || target.y > AREA_HEIGHT) return true\n    return false\n  }\n\n  updateLander(command: Gene) {\n    this.lander.update(command.rotate, command.power)\n  }\n}\n","import { MARS_GRAVITY } from \"./config\"\nimport { Position } from \"./types\"\n\nconst cos = [\n  0.0, 0.0174524064372836, 0.03489949670250108, 0.052335956242943966,\n  0.06975647374412523, 0.08715574274765836, 0.10452846326765346,\n  0.12186934340514749, 0.13917310096006547, 0.15643446504023092,\n  0.17364817766693041, 0.19080899537654492, 0.20791169081775923,\n  0.22495105434386514, 0.24192189559966767, 0.25881904510252074,\n  0.27563735581699916, 0.29237170472273677, 0.30901699437494745,\n  0.32556815445715676, 0.3420201433256688, 0.35836794954530016,\n  0.3746065934159122, 0.3907311284892737, 0.4067366430758004,\n  0.42261826174069944, 0.43837114678907746, 0.45399049973954686,\n  0.46947156278589086, 0.4848096202463371, 0.5000000000000001,\n  0.5150380749100544, 0.5299192642332049, 0.5446390350150272,\n  0.5591929034707468, 0.573576436351046, 0.5877852522924731, 0.6018150231520483,\n  0.6156614753256583, 0.6293203910498375, 0.6427876096865394,\n  0.6560590289905074, 0.6691306063588582, 0.6819983600624985,\n  0.6946583704589974, 0.7071067811865476, 0.7193398003386512,\n  0.7313537016191705, 0.7431448254773942, 0.754709580222772, 0.766044443118978,\n  0.7771459614569708, 0.7880107536067219, 0.7986355100472928,\n  0.8090169943749475, 0.8191520442889918, 0.8290375725550417, 0.838670567945424,\n  0.848048096156426, 0.8571673007021123, 0.8660254037844387, 0.8746197071393957,\n  0.882947592858927, 0.8910065241883679, 0.898794046299167, 0.9063077870366499,\n  0.9135454576426009, 0.9205048534524404, 0.9271838545667874,\n  0.9335804264972017, 0.9396926207859084, 0.9455185755993168,\n  0.9510565162951535, 0.9563047559630355, 0.9612616959383189,\n  0.9659258262890683, 0.9702957262759965, 0.9743700647852352,\n  0.9781476007338057, 0.981627183447664, 0.984807753012208, 0.9876883405951378,\n  0.9902680687415704, 0.992546151641322, 0.9945218953682733, 0.9961946980917455,\n  0.9975640502598242, 0.9986295347545738, 0.9993908270190958,\n  0.9998476951563913, 1.0,\n]\nconst sin = [\n  1.0, 0.9998476951563913, 0.9993908270190958, 0.9986295347545738,\n  0.9975640502598242, 0.9961946980917455, 0.9945218953682733, 0.992546151641322,\n  0.9902680687415704, 0.9876883405951378, 0.984807753012208, 0.981627183447664,\n  0.9781476007338057, 0.9743700647852352, 0.9702957262759965,\n  0.9659258262890683, 0.9612616959383189, 0.9563047559630354,\n  0.9510565162951535, 0.9455185755993167, 0.9396926207859083,\n  0.9335804264972017, 0.9271838545667873, 0.9205048534524404,\n  0.9135454576426009, 0.9063077870366499, 0.898794046299167, 0.8910065241883678,\n  0.8829475928589269, 0.8746197071393957, 0.8660254037844386,\n  0.8571673007021122, 0.8480480961564261, 0.8386705679454239,\n  0.8290375725550417, 0.8191520442889918, 0.8090169943749475,\n  0.7986355100472928, 0.7880107536067219, 0.7771459614569708, 0.766044443118978,\n  0.7547095802227719, 0.7431448254773942, 0.7313537016191705,\n  0.7193398003386511, 0.7071067811865475, 0.6946583704589973,\n  0.6819983600624985, 0.6691306063588582, 0.6560590289905073,\n  0.6427876096865393, 0.6293203910498375, 0.6156614753256583,\n  0.6018150231520483, 0.5877852522924731, 0.573576436351046, 0.5591929034707468,\n  0.544639035015027, 0.5299192642332049, 0.5150380749100542,\n  0.49999999999999994, 0.48480962024633706, 0.4694715627858908,\n  0.45399049973954675, 0.4383711467890774, 0.42261826174069944,\n  0.40673664307580015, 0.3907311284892737, 0.374606593415912,\n  0.35836794954530027, 0.3420201433256687, 0.3255681544571567,\n  0.3090169943749474, 0.2923717047227367, 0.27563735581699916,\n  0.25881904510252074, 0.24192189559966773, 0.22495105434386498,\n  0.20791169081775931, 0.1908089953765448, 0.17364817766693033,\n  0.15643446504023087, 0.13917310096006544, 0.12186934340514748,\n  0.10452846326765346, 0.08715574274765817, 0.0697564737441253,\n  0.05233595624294383, 0.03489949670250097, 0.01745240643728351, 0.0,\n]\n\nexport default class MarsLander {\n  pos: Position = { x: 0, y: 0 }\n  fuel: number = 0 // the quantity of remaining fuel in liters.\n  hSpeed: number = 0 // the horizontal speed (in m/s), can be negative.\n  vSpeed: number = 0 // the vertical speed (in m/s), can be negative.\n  rotate: number = 0 // the rotation angle in degrees (-90 to 90).\n  power: number = 0 // the thrust power (0 to 4).\n  positions: Position[] = []\n  // for log\n  hSpeeds: number[] = []\n  vSpeeds: number[] = []\n  rotates: number[] = []\n\n  constructor(\n    initialPos: Position,\n    hSpeed = 0,\n    vSpeed = 0,\n    fuel = 1000,\n    rotate = 0\n  ) {\n    this.pos = initialPos\n    this.hSpeed = hSpeed\n    this.vSpeed = vSpeed\n    this.fuel = fuel\n    this.rotate = rotate\n  }\n\n  update(rotate: number, power: number) {\n    this.updateRotate(rotate)\n    this.updatePower(power)\n    this.updatePositionAndSpeed()\n  }\n\n  updateRotate(requestedRotate: number) {\n    const rotation = Math.min(Math.max(requestedRotate, -15), 15)\n\n    if (this.rotate != requestedRotate) {\n      this.rotate = Math.min(Math.max(this.rotate + rotation, -90), 90)\n    }\n\n    this.rotates.push(this.rotate)\n  }\n  updatePower(requestedPower) {\n    this.power =\n      this.power === requestedPower\n        ? this.power\n        : this.power + (requestedPower > this.power ? +1 : -1)\n  }\n  updateFuel() {}\n  updatePositionAndSpeed() {\n    const absoluteRotate = Math.abs(this.rotate)\n\n    const powerVectorX =\n      cos[absoluteRotate] * this.power * (this.rotate < 0 ? 1 : -1)\n    const powerVectorY = sin[absoluteRotate] * this.power\n\n    const newVSpeed = this.vSpeed + MARS_GRAVITY + powerVectorY\n    const newHSpeed = this.hSpeed + powerVectorX\n\n    const yMove = this.vSpeed + (MARS_GRAVITY + powerVectorY) * 0.5\n    const xMove = this.hSpeed + powerVectorX * 0.5\n\n    const newPosY = this.pos.y + yMove\n    const newPosX = this.pos.x + xMove\n\n    this.pos.y = newPosY\n    this.pos.x = newPosX\n\n    this.positions.push({ x: newPosX, y: newPosY })\n\n    this.vSpeed = newVSpeed\n    this.hSpeed = newHSpeed\n\n    this.hSpeeds.push(newHSpeed)\n    this.vSpeeds.push(newVSpeed)\n  }\n\n  /**\n   * Return true si\n   * - atterrir dans une position verticale (angle = 0°)\n   * - la vitesse verticale doit être limitée ( ≤ 40 m/s en valeur absolue)\n   * - la vitesse horizontale doit être limitée ( ≤ 20 m/s en valeur absolue)\n   */\n  landedWell(): boolean {\n    return (\n      this.rotate === 0 &&\n      Math.abs(this.vSpeed) <= 40 &&\n      Math.abs(this.hSpeed) <= 20\n    )\n  }\n}\n","const ENTREES = [\n  \"7\",\n  \"0 100\",\n  \"1000 500\",\n  \"1500 1500\",\n  \"3000 1000\",\n  \"4000 150\",\n  \"5500 150\",\n  \"6999 800\",\n  \"2500 2700 0 0 550 0 0\",\n]\n\n// On crée le générateur pour lire le fichier\nlet reader = fileReader(ENTREES)\n\n// Générateur pour lire une par une les lignes du fichier des entrées\nfunction* fileReader(fichier) {\n  const lignes = fichier\n  for (const ligne of lignes) {\n    yield ligne\n  }\n}\n\nexport default function readline() {\n  return reader.next().value\n}\n","import GameSimulator from \"./GameSimulator\"\nimport readline from \"./readline\"\nimport SimulatorUI from \"./SimulatorUI\"\nimport { Position } from \"./types\"\n\n// ! partie ui, à ne pas copier sur codingame\n// buttons\nconst playBtn = document.getElementById(\"play\") as HTMLButtonElement\nconst nextBtn = document.getElementById(\"next\") as HTMLButtonElement\nconst pauseBtn = document.getElementById(\"pause\") as HTMLButtonElement\nconst resetBtn = document.getElementById(\"reset\") as HTMLButtonElement\n\n/**\n * Auto-generated code below aims at helping you parse\n * the standard input according to the problem statement.\n **/\n\nconst surfaces: Position[] = []\n\nconst surfaceN = parseInt(readline()) // the number of points used to draw the surface of Mars.\nfor (let i = 0; i < surfaceN; i++) {\n  var inputs = readline().split(\" \")\n  const landX = parseInt(inputs[0]) // X coordinate of a surface point. (0 to 6999)\n  const landY = parseInt(inputs[1]) // Y coordinate of a surface point. By linking all the points together in a sequential fashion, you form the surface of Mars.\n  surfaces.push({ x: landX, y: landY })\n}\n\nconst ui = new SimulatorUI()\nconst simulator = new GameSimulator(surfaces, ui)\n\n// events\nplayBtn.addEventListener(\"click\", simulator.handlePlay)\nnextBtn.addEventListener(\"click\", simulator.handleNext)\npauseBtn.addEventListener(\"click\", simulator.handlePause)\nresetBtn.addEventListener(\"click\", simulator.handleReset)\n\nlet loop = true\n// game loop\nwhile (loop) {\n  var inputs = readline().split(\" \")\n  const X = parseInt(inputs[0])\n  const Y = parseInt(inputs[1])\n  const hSpeed = parseInt(inputs[2]) // the horizontal speed (in m/s), can be negative.\n  const vSpeed = parseInt(inputs[3]) // the vertical speed (in m/s), can be negative.\n  const fuel = parseInt(inputs[4]) // the quantity of remaining fuel in liters.\n  const rotate = parseInt(inputs[5]) // the rotation angle in degrees (-90 to 90).\n  const power = parseInt(inputs[6]) // the thrust power (0 to 4).\n\n  // Write an action using console.log()\n  // To debug: console.error('Debug messages...');\n\n  // simulator.start(X, Y, hSpeed, vSpeed, fuel, rotate, power)\n\n  // rotate power. rotate is the desired rotation angle. power is the desired thrust power.\n  console.log(\"-20 3\")\n  loop = false\n}\n","import { CHROMOSOME_SIZE, POPULATION_SIZE, SELECTED_PERCENT } from \"./config\"\nimport Game from \"./Game\"\nimport MarsLander from \"./MarsLander\"\nimport SimulatorUI from \"./SimulatorUI\"\nimport { Surfaces, MarsLanderData, Chromosome, Population, Gene } from \"./types\"\n\nexport default class GameSimulator {\n  simulationUI: SimulatorUI | null\n\n  simulate = false\n  turns = 0\n  surfaces: Surfaces\n  tick: NodeJS.Timer\n  population: Population\n  landerInitialData: MarsLanderData\n\n  constructor(surfaces: Surfaces, ui: SimulatorUI | null = null) {\n    this.surfaces = surfaces\n\n    // ui\n    if (ui) {\n      this.simulationUI = ui\n    }\n    this.simulationUI?.drawGround(this.surfaces)\n\n    // events listeners bind\n    this.loop = this.loop.bind(this)\n    this.handlePlay = this.handlePlay.bind(this)\n    this.handleNext = this.handleNext.bind(this)\n    this.handlePause = this.handlePause.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n  }\n\n  handlePlay() {\n    // this.start(6500, 2800, -90, 0, 550, 0, 0, true)\n    this.start(2500, 2700, 0, 0, 550, 0, 0, true)\n  }\n  handleNext() {\n    this.start(2500, 2700, 0, 0, 550, 0, 0, false)\n    // this.start(6500, 2800, -90, 0, 550, 0, 0, false)\n  }\n  handlePause() {\n    this.stop()\n  }\n  handleReset() {\n    this.stop()\n    this.population.length = 0\n    this.turns = 0\n    this.simulationUI!.clear()\n  }\n  stop() {\n    this.simulate = false\n    clearInterval(this.tick)\n  }\n\n  start(X, Y, hSpeed, vSpeed, fuel, rotate, power, startLoop) {\n    this.landerInitialData = { X, Y, hSpeed, vSpeed, fuel, rotate, power }\n\n    if (startLoop === true) {\n      if (this.simulationUI != null) {\n        this.simulate = true\n        this.tick = setInterval(this.loop, 60)\n      } else {\n        this.simulate = true\n        while (this.simulate === true) {\n          this.loop()\n        }\n      }\n    } else {\n      this.loop()\n    }\n  }\n\n  loop() {\n    if (this.simulationUI != null) {\n      window.requestAnimationFrame(() => this.simulationUI!.clear())\n    }\n\n    if (this.turns === 0) {\n      this.population = this.createPopulation(POPULATION_SIZE, CHROMOSOME_SIZE)\n    }\n\n    const { games, isSolution } = this.simulateGames(this.population)\n    if (isSolution === true) {\n      this.stop()\n      console.log(\"GAGNEEEEEE !!!!!! :D\")\n    }\n    const selectedGames = this.selection(games)\n\n    const bestGame = selectedGames[0]\n    console.log(\"BEST GAME :\", bestGame)\n\n    if (this.simulationUI != null) {\n      window.requestAnimationFrame(() =>\n        this.simulationUI!.updateInfoFrame(\n          this.turns,\n          selectedGames[0].score,\n          selectedGames[0].result\n        )\n      )\n    }\n\n    const nIndividuals = this.generatePopulation(\n      selectedGames,\n      Math.floor(POPULATION_SIZE * (1 - SELECTED_PERCENT))\n    )\n    this.population = [\n      ...selectedGames.map((game) => this.mutate(game.commands)),\n      ...nIndividuals,\n    ]\n\n    this.turns += 1\n\n    if (this.turns > 20000) {\n      this.stop()\n    }\n  }\n  generatePopulation(populationSelected: Game[], size: number): Population {\n    const children: Population = []\n    while (children.length < size) {\n      const momIndex = Math.floor(Math.random() * populationSelected.length)\n      const dadIndex = Math.floor(Math.random() * populationSelected.length)\n      const mom = populationSelected[momIndex]\n      const dad = populationSelected[dadIndex]\n\n      // Chaque couple fait deux enfants\n      const nIndividuals = this.crossOver(mom, dad)\n      nIndividuals.map((i) => this.mutate(i, mom, dad))\n      children.push(...nIndividuals)\n    }\n    return children\n  }\n  crossOver(mom: Game, dad: Game): Chromosome[] {\n    let first = mom\n    let second = dad\n    if (Math.random() < 0.5) {\n      first = dad\n      second = mom\n    }\n\n    let nIndividual1: Chromosome = []\n    let nIndividual2: Chromosome = []\n    const randomWeight = Math.random()\n    // 1ere méthode avec un index aléatoire\n    // const minTurns = Math.min(first.timer, second.timer)\n    // const randParentIndex = Math.floor(Math.random() * minTurns)\n    // for (let i = 0; i < randParentIndex; i++) {\n    //   nIndividual.push(first.commands[i])\n    // }\n    // for (let i = randParentIndex; i < this.CHROMOSOME_SIZE; i++) {\n    //   nIndividual.push(second.commands[i])\n    // }\n\n    // 2eme méthode avec nouveau gene la somme pondéré de ceux de ses parents\n    for (let i = 0; i < CHROMOSOME_SIZE; i++) {\n      const firstParentGene = first.commands[i] as Gene\n      const secondParentGene = second.commands[i] as Gene\n      const nGene1 = {\n        rotate: Math.round(\n          randomWeight * firstParentGene.rotate +\n            (1 - randomWeight) * secondParentGene.rotate\n        ),\n        power: Math.round(\n          randomWeight * firstParentGene.power +\n            (1 - randomWeight) * secondParentGene.power\n        ),\n      }\n      const nGene2 = {\n        rotate: Math.round(\n          randomWeight * secondParentGene.rotate +\n            (1 - randomWeight) * firstParentGene.rotate\n        ),\n        power: Math.round(\n          randomWeight * secondParentGene.power +\n            (1 - randomWeight) * firstParentGene.power\n        ),\n      }\n      nIndividual1.push(nGene1)\n      nIndividual2.push(nGene2)\n    }\n\n    return [nIndividual1, nIndividual2]\n  }\n  mutate(\n    chromosome: Chromosome,\n    mom: Game | null = null,\n    dad: Game | null = null\n  ) {\n    let scoreMultiplier = 1\n\n    if (mom == null) {\n      scoreMultiplier = 0.2\n    }\n\n    for (let i = 0; i < CHROMOSOME_SIZE; i++) {\n      const progress = i / CHROMOSOME_SIZE\n      const progressChance = 0.4 + progress + 10 * progress * progress\n      const mutationChance =\n        0.01 * Math.random() * progressChance * scoreMultiplier\n\n      const rand = Math.random()\n      if (rand < mutationChance) {\n        chromosome[i] = this.createGene()\n      }\n    }\n    return chromosome\n  }\n  selection(population: Game[]): Game[] {\n    const sorted = population.sort((a, b) => b.score - a.score)\n\n    const nPopulation: Game[] = []\n\n    // select x% of bests\n    const toRetainNum = Math.floor(POPULATION_SIZE * SELECTED_PERCENT)\n    const bests = sorted.slice(0, toRetainNum)\n    bests.forEach((best) => nPopulation.push(best))\n    return bests\n  }\n  createGene() {\n    return {\n      rotate: Math.round(Math.random() * 15) * (Math.random() < 0.5 ? -1 : 1),\n      power: Math.round(Math.random() * 4),\n    }\n  }\n\n  createChromosome(size: number): Chromosome {\n    const chromosome: Chromosome = []\n    for (let i = 0; i < size; i++) {\n      chromosome.push(this.createGene())\n    }\n    return chromosome\n  }\n\n  createPopulation(size: number, chromSize: number) {\n    const population: Population = []\n    for (let i = 0; i < size; i++) {\n      population.push(this.createChromosome(chromSize))\n    }\n    return population\n  }\n  simulateGames(population: Population) {\n    const games: Game[] = []\n    let isSolution = false\n    for (let i = 0; i < population.length; i++) {\n      const chromosome = population[i]\n      const game = this.simulateGame(chromosome)\n      games.push(game)\n      if (game.result === \"win\") {\n        console.log(\"JEU GAGNANT\", game)\n\n        isSolution = true\n        break\n      }\n    }\n    return { games, isSolution }\n  }\n\n  simulateGame(commands: Chromosome) {\n    const lander = new MarsLander(\n      {\n        x: this.landerInitialData.X,\n        y: this.landerInitialData.Y,\n      },\n      this.landerInitialData.hSpeed,\n      this.landerInitialData.vSpeed,\n      this.landerInitialData.fuel,\n      this.landerInitialData.rotate\n    )\n    const game = new Game(lander, commands, this.surfaces)\n    game.playGame()\n    this.simulationUI!.draw(game)\n    return game\n  }\n}\n"],"names":["$963c59391fb7099e$var$gameDataTimer","document","getElementById","$963c59391fb7099e$var$gameDataBestScore","$963c59391fb7099e$var$gameDataBestState","$963c59391fb7099e$export$2e2bcd8739ae039","height","width","constructor","this","marsBg","animation","marsBgContext","getContext","animationContext","scaleFactor","clientWidth","drawLander","bind","clear","clearRect","draw","game","window","requestAnimationFrame","drawGround","surfaces","save","translate","scale","beginPath","moveTo","lineTo","y","surface","x","fillStyle","fill","restore","console","error","lander","result","positions","i","length","pos","fillRect","Math","round","lineWidth","stroke","updateInfoFrame","timer","bestScore","bestState","textContent","toString","$7b066675d1aa79fa$export$2e2bcd8739ae039","simulationUI","playing","score","distanceToLandingArea","commands","ground","landingArea","findLandingArea","distanceTo","P1","P2","sqrt","calculateScore","crashed","maxDist","landingAreaCenter","vSpeed","abs","hSpeed","hSpeedMalus","vSpeedMalus","rotateMalus","max","rotate","malus","stopGame","playGame","doTurn","intersectSegment","A","B","I","P","D","E","denom","t","u","position","collision","tab","prevPos","currentPos","pointsNum","intersections","iseg","push","state","point","nextPoint","command","Object","assign","updateLander","outOfBounds","log","JSON","stringify","landedWell","target","update","power","$8e14bb32223458a4$var$cos","$8e14bb32223458a4$var$sin","$8e14bb32223458a4$export$2e2bcd8739ae039","fuel","hSpeeds","vSpeeds","rotates","initialPos","updateRotate","updatePower","updatePositionAndSpeed","requestedRotate","rotation","min","requestedPower","updateFuel","absoluteRotate","powerVectorX","powerVectorY","newVSpeed","newHSpeed","yMove","xMove","newPosY","newPosX","$a22a68cea04ec09e$var$reader","fichier","lignes","ligne","$a22a68cea04ec09e$var$fileReader","$a22a68cea04ec09e$export$2e2bcd8739ae039","next","value","$b4e14b6b8da86996$var$playBtn","$b4e14b6b8da86996$var$nextBtn","$b4e14b6b8da86996$var$pauseBtn","$b4e14b6b8da86996$var$resetBtn","$b4e14b6b8da86996$var$surfaces","$b4e14b6b8da86996$var$surfaceN","parseInt","$b4e14b6b8da86996$var$inputs","split","landX","landY","$b4e14b6b8da86996$var$ui","$b4e14b6b8da86996$var$simulator","simulate","turns","ui","loop","handlePlay","handleNext","handlePause","handleReset","start","stop","population","clearInterval","tick","X","Y","startLoop","landerInitialData","setInterval","createPopulation","games","isSolution","simulateGames","selectedGames","selection","bestGame","nIndividuals","generatePopulation","floor","map","mutate","populationSelected","size","children","momIndex","random","dadIndex","mom","dad","crossOver","first","second","nIndividual1","nIndividual2","randomWeight","firstParentGene","secondParentGene","nGene1","nGene2","chromosome","scoreMultiplier","progress","progressChance","mutationChance","createGene","sorted","sort","a","b","nPopulation","toRetainNum","bests","slice","forEach","best","createChromosome","chromSize","simulateGame","addEventListener","$b4e14b6b8da86996$var$loop"],"version":3,"file":"index.57b79082.js.map"}